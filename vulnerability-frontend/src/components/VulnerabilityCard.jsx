import React, { useState } from 'react';
import axios from 'axios';
import {
    Accordion,
    AccordionSummary,
    AccordionDetails,
    Typography,
    Box,
    Chip,
    Link,
    List,
    ListItem,
    ListItemIcon,
    ListItemText,
    Button,
    CircularProgress,
} from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import FolderIcon from '@mui/icons-material/Folder';
import BugReportIcon from '@mui/icons-material/BugReport';
import CodeIcon from '@mui/icons-material/Code';
import JiraLinker from './JiraLinker';

// Chip for vulnerability severity (e.g., Critical, High)
const SeverityChip = ({ severity }) => {
    const color = {
        'critical': 'error',
        'high': 'warning',
    }[severity.toLowerCase()] || 'default';
    return <Chip label={severity} color={color} size="small" sx={{ textTransform: 'capitalize' }} />;
};

// --- NEW --- Chip for overall vulnerability status (e.g., OPEN, RESOLVED)
const StatusChip = ({ status }) => {
    const color = status === 'OPEN' ? 'error' : 'success';
    const label = status === 'OPEN' ? 'Open' : 'Resolved';
    return <Chip label={label} color={color} variant="outlined" size="small" />;
};

function VulnerabilityCard({ vulnerability, instances, onDataRefresh }) {
    const {
        description,
        package: pkg,
        type,
        githubAlertUrl,
        severity,
    } = vulnerability;

    // --- NEW --- Calculate the overall status of the vulnerability
    // If any instance is open, the whole vulnerability is considered open.
    const isAnyInstanceOpen = instances.some(inst => inst.status === 'OPEN');
    const overallStatus = isAnyInstanceOpen ? 'OPEN' : 'RESOLVED';

    // --- NEW --- State for the create button
    const [isCreating, setIsCreating] = useState(false);
    const [createError, setCreateError] = useState('');

    // --- NEW --- Aggregate unique Jira tickets to display a summary
    const uniqueJiraTickets = instances.reduce((acc, inst) => {
        if (inst.jiraTicket) {
            acc.set(inst.jiraTicket.ticketKey, inst.jiraTicket);
        }
        return acc;
    }, new Map());
    const jiraTicketsArray = Array.from(uniqueJiraTickets.values());

    const handleCreateTicket = async () => {
        setIsCreating(true);
        setCreateError('');
        try {
            await axios.post(`/api/vulnerability/${vulnerability.id}/create-ticket`);
            // Refresh the dashboard data to show the newly linked ticket
            onDataRefresh();
        } catch (err) {
            setCreateError(err.response?.data?.message || 'Failed to create ticket.');
        } finally {
            setIsCreating(false);
        }
    };


    return (
        <Accordion sx={{ bgcolor: 'background.paper' }} defaultExpanded={isAnyInstanceOpen}>
            <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                <Box display="flex" alignItems="center" width="100%" flexWrap="wrap" gap={1}>
                    {/* Status Chips are now on the left */}
                    <SeverityChip severity={severity} />
                    <StatusChip status={overallStatus} />

                    <Typography sx={{ ml: 1, flex: 1, minWidth: '300px' }}>
                        {description}
                    </Typography>

                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, ml: 'auto' }}>
                        {/* --- NEW --- Jira Status Summary Chip(s) --- */}
                        {jiraTicketsArray.length === 1 && (
                            <Chip label={`${jiraTicketsArray[0].ticketKey} - ${jiraTicketsArray[0].status}`} color="info" size="small" />
                        )}
                        {jiraTicketsArray.length > 1 && (
                            <Chip label="Multiple Jira Tickets" color="info" size="small" />
                        )}
                        {/* ------------------------------------------- */}
                        <Chip
                            icon={type === 'Dependabot' ? <BugReportIcon /> : <CodeIcon />}
                            label={`${instances.length} Repo(s)`}
                            variant="outlined"
                            size="small"
                        />
                    </Box>
                </Box>
            </AccordionSummary>
            <AccordionDetails sx={{ borderTop: '1px solid rgba(255, 255, 255, 0.12)' }}>
                {/* ... (AccordionDetails content remains the same) */}
                <Typography variant="subtitle2" gutterBottom>
                    Vulnerability Details
                </Typography>
                <Box display="flex" gap={2} mb={2}>
                    <Chip label={`Type: ${type}`} size="small" />
                    <Chip label={`Component: ${pkg}`} size="small" />
                </Box>

                <Typography variant="subtitle2" gutterBottom sx={{ mt: 2 }}>
                    Affected Repositories ({instances.length})
                </Typography>
                <List dense>
                    {instances.map((instance) => (
                        <ListItem key={instance.id} secondaryAction={
                            <JiraLinker affectedRepository={instance} onTicketLink={onDataRefresh} />
                        }>
                            <ListItemIcon>
                                <FolderIcon fontSize="small" />
                            </ListItemIcon>
                            <ListItemText
                                primary={instance.repository.fullName}
                                secondary={instance.status === 'RESOLVED' ? 'Status: Resolved' : null}
                            />
                        </ListItem>
                    ))}
                </List>

                {jiraTicketsArray.length === 0 && (
                    <Box sx={{ mt: 2 }}>
                        <Button
                            variant="contained"
                            color="primary"
                            onClick={handleCreateTicket}
                            disabled={isCreating}
                        >
                            {isCreating ? <CircularProgress size={24} /> : 'Create Jira Ticket for All'}
                        </Button>
                        {createError && <Typography color="error" variant="caption" sx={{ ml: 2 }}>{createError}</Typography>}
                    </Box>
                )}

                <Link href={githubAlertUrl} target="_blank" rel="noopener noreferrer" sx={{ mt: 2, display: 'inline-block' }}>
                    View a sample alert in GitHub
                </Link>
            </AccordionDetails>
        </Accordion>
    );
}

export default VulnerabilityCard;