import React, { useState } from 'react';
import { Box, TextField, Button, Typography, Chip, CircularProgress, IconButton } from '@mui/material';
import ClearIcon from '@mui/icons-material/Clear';
import axios from 'axios';

export default function JiraLinker({ affectedRepository, onTicketLink }) {
    const [jiraKey, setJiraKey] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');

    const handleLinkTicket = async () => {
        if (!jiraKey) return;
        setIsLoading(true);
        setError('');
        try {
            await axios.post(`/api/affected-repository/${affectedRepository.id}/link-ticket`, { jiraKey });
            onTicketLink(); // This function should refetch the data from the parent
        } catch (err) {
            // --- UPDATED ERROR HANDLING ---
            // This will now display the detailed error message from the backend
            setError(err.response?.data?.message || 'An unknown client error occurred.');
            // ----------------------------
        } finally {
            setIsLoading(false);
            // We keep the jiraKey in the input field on error so the user can check for typos
        }
    };

    const handleUnlinkTicket = async () => {
        setIsLoading(true);
        setError('');
        try {
            console.log("Unlinking ticket for ID:", affectedRepository.id);
            await axios.delete(`/api/affected-repository/${affectedRepository.id}/link-ticket`);
            onTicketLink(); // Refresh the parent component's data
        } catch (err) {
            setError('Failed to unlink ticket.');
        } finally {
            setIsLoading(false);
        }
    };

    if (affectedRepository.jiraTicket) {
        return (
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
                <Chip
                    label={`${affectedRepository.jiraTicket.ticketKey} - ${affectedRepository.jiraTicket.status}`}
                    component="a"
                    href={affectedRepository.jiraTicket.url}
                    target="_blank"
                    clickable
                    color="primary"
                    size="small"
                />
                <IconButton onClick={handleUnlinkTicket} disabled={isLoading} size="small" aria-label="unlink ticket">
                    {isLoading ? <CircularProgress size={16} /> : <ClearIcon fontSize="small" />}
                </IconButton>
            </Box>
        );
    }

    return (
        <Box sx={{ mt: 2 }}>
            <Typography variant="subtitle2" gutterBottom>Link Jira Ticket</Typography>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <TextField
                    label="Jira Ticket Key (e.g., PROJ-123)"
                    variant="outlined"
                    size="small"
                    value={jiraKey}
                    onChange={(e) => setJiraKey(e.target.value.toUpperCase())}
                    disabled={isLoading}
                />
                <Button
                    variant="contained"
                    onClick={handleLinkTicket}
                    disabled={isLoading || !jiraKey}
                >
                    {isLoading ? <CircularProgress size={24} /> : 'Link'}
                </Button>
            </Box>
            {error && <Typography color="error" variant="caption" sx={{ mt: 1 }}>{error}</Typography>}
        </Box>
    );
}